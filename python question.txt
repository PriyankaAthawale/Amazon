● Question 1: What is Pandas, and why is it commonly used in data cleaning tasks?
Answer=> Pandas is an open source data manupulation and analysis library for python.
                Pandas allows for easy filtering and selection of specific rows and columns based on conditions this is crucial for cleaning data.

● Question 2: Given a DataFrame with missing values, how would you check for missing
values in each column and count the total number of missing values?
Answer=> pd.isnull().sum()

● Question 3: How can you remove duplicates from a DataFrame while retaining the first
occurrence of each unique row?
Answer=> pd.drop_duplicates(inplace=True)

● Question 4: If you have a DataFrame with a column containing string values, how can
you convert all the values in that column to lowercase?
Answer=> pd['Name'].str.lower()


● Question 5: How do you replace missing values in a DataFrame with a specific value,
like 0, for a particular column?
Answer=> pd['B'].fillna(0, inplace=True)

● Question 6: If you have a DataFrame with a datetime column, how can you extract the
year, month, and day into separate columns?
Answer=> pd['Date']=pd.to_datetime(pd['Date'])
                pd['Year'] = pd['Date'].dt.year
	pd['Month'] = pd['Date'].dt.month
	pd['Day'] = pd['Date'].dt.day

● Question 7: How can you filter rows in a DataFrame where a specific column's values
meet a certain condition (e.g., all rows where 'age' is greater than 30)?
Answer=> pd['age']=pd[pd['age']>30]

● Question 8: What is the purpose of the .apply() function in Pandas, and how would you
use it to create a new column based on values from existing columns?
Answer=>   .apply() function in pandas allowing you to perform operations on entire rows or columns.
                def multiply_age(x):
                       return x*2
 pd['new_age']=pd['age'].apply(multiply_age)


● Question 9: Suppose you want to merge two DataFrames, 'df1' and 'df2,' on a common
column 'key.' How would you perform this merge operation in Pandas?
Answer=>  pd.merge(df1, df2, on='key')

● Question 10: You have a DataFrame with a column containing messy text data. How can
you clean and standardize the text data (e.g., remove punctuation and convert to
lowercase) in that column?
Answer=> pd['text'] = pd['messy_text'].apply(lambda x: ' '.join(word.strip(string.punctuation) for word in x.lower().split()))